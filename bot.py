"""
Telegram bot for apartment price estimation with built‚Äëin keep‚Äëalive pings so a free Render instance
won't fall asleep after 15‚ÄØmin of inactivity. Just deploy this script, make sure that the environment
variable RENDER_EXTERNAL_HOSTNAME is present (Render sets it automatically), and add `aiohttp`
to your requirements.txt.

Main additions compared to the original version:
  ‚Ä¢ `import aiohttp` and `keep_alive()` coroutine (sends GET to https://<RENDER_EXTERNAL_HOSTNAME>/ every 9‚ÄØmin).
  ‚Ä¢ `asyncio.create_task(keep_alive())` inside the `run()` startup function.
  ‚Ä¢ TOKEN can now be supplied via the `TELEGRAM_BOT_TOKEN` env var (hard‚Äëcoded fallback kept for dev).
"""

import logging
import pickle
import os
import asyncio
import aiohttp  # NEW: for keep‚Äëalive pings

import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# --------------------------------------------------
# Logger setup
# --------------------------------------------------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# --------------------------------------------------
# Load ML model package (dict with: model, encoder, districts, features_order)
# --------------------------------------------------
with open("xgb_model_package.pkl", "rb") as f:
    model_data = pickle.load(f)

KEY_RATE = 21  # –¶–ë –∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –¥–∞—Ç—É –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏

# --------------------------------------------------
# Constant mappings
# --------------------------------------------------

apartment_type_mapping = {
    "üè¢ –°—Ç—É–¥–∏—è": 0,
    "1Ô∏è‚É£ 1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è": 1,
    "2Ô∏è‚É£ 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è": 2,
    "3Ô∏è‚É£ 3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è": 3,
    "4Ô∏è‚É£ 4 –∏ –±–æ–ª–µ–µ –∫–æ–º–Ω–∞—Ç": 4,
}

districts_name_to_num = {
    "–¶–µ–Ω—Ç—Ä üèôÔ∏è": 36,
    "–ü–µ—Ä–≤–∞—è —Ä–µ—á–∫–∞ üåâ": 35,
    "–ü–∞—Ç—Ä–æ–∫–ª üåÖ": 34,
    "–≠–≥–µ—Ä—à–µ–ª—å–¥ üåä": 33,
    "–ù–µ–∫—Ä–∞—Å–æ–≤—Å–∫–∞—è üèûÔ∏è": 32,
    "–¢–æ–ª—Å—Ç–æ–≥–æ (–ë—É—Å—Å–µ) üåÑ": 31,
    "–¢—Ä–µ—Ç—å—è —Ä–∞–±–æ—á–∞—è ‚öôÔ∏è": 30,
    "–°–Ω–µ–≥–æ–≤–∞—è –ø–∞–¥—å ‚ùÑÔ∏è": 29,
    "–°–µ–¥–∞–Ω–∫–∞ üå≤": 28,
    "–ó–∞—Ä—è üåá": 27,
    "–°—Ç–æ–ª–µ—Ç–∏–µ üìç": 26,
    "–ß—É—Ä–∫–∏–Ω üåÅ": 25,
    "–¢—Ä—É–¥–æ–≤–æ–µ üèóÔ∏è": 24,
    "–§–∞–¥–µ–µ–≤–∞ üöß": 23,
    "–í—Ç–æ—Ä–∞—è —Ä–µ—á–∫–∞ üõ§Ô∏è": 22,
    "–ë–ê–ú üöß": 21,
    "–°–∞–¥–≥–æ—Ä–æ–¥ üåø": 20,
    "–ß–∞–π–∫–∞ üê¶": 19,
    "–û–∫–µ–∞–Ω—Å–∫–∞—è üåä": 18,
    "–ì–∞–π–¥–∞–º–∞–∫ üèòÔ∏è": 17,
    "–ë–∞–ª—è–µ–≤–∞ üß≠": 16,
    "64, 71 –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω—ã üè¢": 15,
    "–õ—É–≥–æ–≤–∞—è üåæ": 14,
    "–¢–∏—Ö–∞—è ü§´": 13,
    "–°–Ω–µ–≥–æ–≤–∞—è ‚ùÑÔ∏è": 12,
    "–°–∞—Ö–∞—Ä–Ω—ã–π –∫–ª—é—á üç¨": 11,
    "–°–ø—É—Ç–Ω–∏–∫ üõ∞Ô∏è": 10,
    "–ë–æ—Ä–∏—Å–µ–Ω–∫–æ üõ†Ô∏è": 9,
    "–¢—Ä—É–¥–æ–≤–∞—è üß±": 8,
    "–ü–µ—Ä–≤–æ—Ä–µ—á–µ–Ω—Å–∫–∏–π üìç": 7,
    "–í–µ—Å–µ–Ω–Ω—è—è üå∏": 6,
    "–ü—Ä–∏–≥–æ—Ä–æ–¥ üèûÔ∏è": 5,
    "–ü–æ–ø–æ–≤–∞ üèùÔ∏è": 4,
    "–ì–æ—Ä–Ω–æ—Å—Ç–∞–π üêøÔ∏è": 3,
    "–†—É—Å—Å–∫–∏–π üèùÔ∏è": 2,
    "–ü–æ-–æ–≤, –ü–µ—Å—á–∞–Ω–Ω—ã–π üèñÔ∏è": 1,
}

# Conversation state constants
SELECT_DISTRICT, INPUT_AREA, SELECT_APTYPE, INPUT_CURRENT_FLOOR, INPUT_TOTAL_FLOORS = range(5)

# --------------------------------------------------
# Helper UI builders
# --------------------------------------------------

def build_keyboard(options, row_width: int = 2) -> InlineKeyboardMarkup:
    keyboard, row = [], []
    for i, option in enumerate(options, 1):
        row.append(InlineKeyboardButton(option, callback_data=option))
        if i % row_width == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

def get_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –û—Ü–µ–Ω–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", callback_data="estimate")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
        [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="support")],
    ])

# --------------------------------------------------
# Bot message helpers
# --------------------------------------------------
async def type_and_send(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, **kwargs):
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    await asyncio.sleep(0.6)
    await update.message.reply_text(text, **kwargs)

# --------------------------------------------------
# Command / start + main menu
# --------------------------------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ.*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode=ParseMode.MARKDOWN,
    )

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "estimate":
        keyboard = build_keyboard(list(districts_name_to_num.keys()))
        await query.edit_message_text(
            "üåç *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã:*",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
        )
        return SELECT_DISTRICT
    elif query.data == "about":
        await query.edit_message_text(
            "üè† –ú—ã ‚Äî —Å–µ—Ä–≤–∏—Å –æ—Ü–µ–Ω–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ —Å –ø–æ–º–æ—â—å—é ML. –ü—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
            reply_markup=get_main_menu(),
        )
    elif query.data == "support":
        await query.edit_message_text(
            "üôè –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É: +79241379584\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å ‚ù§Ô∏è",
            reply_markup=get_main_menu(),
        )

# --------------------------------------------------
# Conversation flow handlers
# --------------------------------------------------
async def select_district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    district_name = query.data
    district_num = districts_name_to_num.get(district_name)
    if district_num is None:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return SELECT_DISTRICT
    context.user_data["district_num"] = district_num
    context.user_data["district_name"] = district_name

    await query.edit_message_text(
        f"üìç –í—ã–±—Ä–∞–Ω —Ä–∞–π–æ–Ω: *{district_name}*\n\n–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–º¬≤):",
        parse_mode=ParseMode.MARKDOWN,
    )
    return INPUT_AREA

async def input_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        area = float(update.message.text.replace(",", "."))
        if area <= 0:
            raise ValueError
    except ValueError:
        return await type_and_send(update, context, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–æ—â–∞–¥–∏.")

    context.user_data["area"] = area
    keyboard = build_keyboard(list(apartment_type_mapping.keys()))
    await type_and_send(
        update,
        context,
        "üèòÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã:*",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )
    return SELECT_APTYPE

async def select_aptype(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    aptype_name = query.data
    aptype_num = apartment_type_mapping.get(aptype_name)
    if aptype_num is None:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECT_APTYPE

    context.user_data["aptype_num"] = aptype_num
    context.user_data["aptype_name"] = aptype_name

    await query.edit_message_text("üè¢ –í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
    return INPUT_CURRENT_FLOOR

async def input_current_floor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        cf = int(update.message.text)
        if cf <= 0:
            raise ValueError
    except ValueError:
        return await type_and_send(update, context, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —ç—Ç–∞–∂–∞.")

    context.user_data["current_floor"] = cf
    await type_and_send(update, context, "üèóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ:")
    return INPUT_TOTAL_FLOORS

async def input_total_floors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        tf = int(update.message.text)
        cf = context.user_data["current_floor"]
        if tf < cf or tf <= 0:
            return await type_and_send(
                update,
                context,
                "‚ö†Ô∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —Ç–µ–∫—É—â–µ–º—É.",
            )
    except ValueError:
        return await type_and_send(update, context, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏.")

    context.user_data["total_floors"] = tf

    price = predict_price(
        area=context.user_data["area"],
        aptype=context.user_data["aptype_num"],
        cf=context.user_data["current_floor"],
        tf=context.user_data["total_floors"],
        key=KEY_RATE,
        district_number=context.user_data["district_num"],
    )

    deviation = int(price * 0.08)
    price_str = f"{int(price):,}".replace(",", " ")
    deviation_str = f"{deviation:,}".replace(",", " ")

    await type_and_send(
        update,
        context,
        f"üí∞ *–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:* *{price_str} ‚ÇΩ*\n¬± {deviation_str} ‚ÇΩ",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_main_menu(),
    )
    return ConversationHandler.END

# --------------------------------------------------
# ML prediction helper
# --------------------------------------------------

def predict_price(area, aptype, cf, tf, key, district_number):
    district_desc = model_data["districts"][district_number]
    new_data = pd.DataFrame(
        {
            "monster": [cf / tf * 100],
            "Area": [area],
            "ApartmentType": [aptype],
            "CurrentFloor": [cf],
            "TotalFloors": [tf],
            "KeyRate": [key],
            "DistrictDesc": [district_desc],
        }
    )

    # One‚Äëhot encode district
    district_encoded = pd.DataFrame(model_data["encoder"].transform(new_data[["DistrictDesc"]]))
    district_encoded.columns = model_data["encoder"].get_feature_names_out(["DistrictDesc"])

    new_data = pd.concat([new_data.drop(["DistrictDesc"], axis=1), district_encoded], axis=1)
    new_data = new_data[model_data["features_order"]]

    return model_data["model"].predict(new_data)[0]

# --------------------------------------------------
# Cancel handler
# --------------------------------------------------

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await type_and_send(update, context, "‚ùå –û—Ü–µ–Ω–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# --------------------------------------------------
# Keep‚Äëalive coroutine (NEW)
# --------------------------------------------------
PING_INTERVAL = 9 * 60  # 9¬†–º–∏–Ω—É—Ç < 15‚Äë–º–∏–Ω—É—Ç–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ Render


async def keep_alive():
    """Periodically pings the app's URL so the free Render instance stays awake."""
    # Wait a bit to ensure the webhook is set
    await asyncio.sleep(10)

    host = os.environ.get("RENDER_EXTERNAL_HOSTNAME")
    if not host:
        logger.warning("RENDER_EXTERNAL_HOSTNAME is not set; keep‚Äëalive disabled")
        return

    url = f"https://{host}/"  # root path is fine; 404 also wakes the container
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get(url, timeout=10) as resp:
                    logger.info("Keep‚Äëalive ping %s ‚Üí %s", url, resp.status)
            except Exception as exc:
                logger.warning("Keep‚Äëalive failed: %s", exc)
            await asyncio.sleep(PING_INTERVAL)

# --------------------------------------------------
# Application setup & launch
# --------------------------------------------------
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "YOUR_TOKEN_HERE")
application = ApplicationBuilder().token(TOKEN).build()

# Handlers
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(main_menu_handler, pattern="^estimate$")],
    states={
        SELECT_DISTRICT: [CallbackQueryHandler(select_district)],
        INPUT_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_area)],
        SELECT_APTYPE: [CallbackQueryHandler(select_aptype)],
        INPUT_CURRENT_FLOOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_current_floor)],
        INPUT_TOTAL_FLOORS: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_total_floors)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    allow_reentry=True,
)

application.add_handler(CommandHandler("start", start))
application.add_handler(CallbackQueryHandler(main_menu_handler, pattern="^(about|support)$"))
application.add_handler(conv_handler)


# Main entry point
async def run():
    await application.initialize()
    await application.start()

    # Set webhook
    host = os.environ["RENDER_EXTERNAL_HOSTNAME"]
    webhook_url = f"https://{host}/telegram"
    await application.bot.set_webhook(url=webhook_url)
    await application.updater.start_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 10000)),
        url_path="/telegram",
        webhook_url=webhook_url,
    )

    # Start keep‚Äëalive ping task
    asyncio.create_task(keep_alive())

    logger.info("‚úÖ Bot is up via webhook and keep‚Äëalive is running!")


if __name__ == "__main__":
    asyncio.run(run())
