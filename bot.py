import logging
import pickle
import asyncio

import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# Logger setup
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# Load ML model package
with open("xgb_model_package.pkl", "rb") as f:
    model_data = pickle.load(f)

KEY_RATE = 21  # –¶–ë –∫–ª—é—á–µ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–∞ –¥–∞—Ç—É –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏

# Constant mappings
apartment_type_mapping = {
    "üè¢ –°—Ç—É–¥–∏—è": 0,
    "1Ô∏è‚É£ 1-–∫–æ–º–Ω–∞—Ç–Ω–∞—è": 1,
    "2Ô∏è‚É£ 2-–∫–æ–º–Ω–∞—Ç–Ω–∞—è": 2,
    "3Ô∏è‚É£ 3-–∫–æ–º–Ω–∞—Ç–Ω–∞—è": 3,
    "4Ô∏è‚É£ 4 –∏ –±–æ–ª–µ–µ –∫–æ–º–Ω–∞—Ç": 4,
}

districts_name_to_num = {
    "–¶–µ–Ω—Ç—Ä üèôÔ∏è": 36,
    "–ü–µ—Ä–≤–∞—è —Ä–µ—á–∫–∞ üåâ": 35,
    "–ü–∞—Ç—Ä–æ–∫–ª üåÖ": 34,
    "–≠–≥–µ—Ä—à–µ–ª—å–¥ üåä": 33,
    "–ù–µ–∫—Ä–∞—Å–æ–≤—Å–∫–∞—è üèûÔ∏è": 32,
    "–¢–æ–ª—Å—Ç–æ–≥–æ (–ë—É—Å—Å–µ) üåÑ": 31,
    "–¢—Ä–µ—Ç—å—è —Ä–∞–±–æ—á–∞—è ‚öôÔ∏è": 30,
    "–°–Ω–µ–≥–æ–≤–∞—è –ø–∞–¥—å ‚ùÑÔ∏è": 29,
    "–°–µ–¥–∞–Ω–∫–∞ üå≤": 28,
    "–ó–∞—Ä—è üåá": 27,
    "–°—Ç–æ–ª–µ—Ç–∏–µ üìç": 26,
    "–ß—É—Ä–∫–∏–Ω üåÅ": 25,
    "–¢—Ä—É–¥–æ–≤–æ–µ üèóÔ∏è": 24,
    "–§–∞–¥–µ–µ–≤–∞ üöß": 23,
    "–í—Ç–æ—Ä–∞—è —Ä–µ—á–∫–∞ üõ§Ô∏è": 22,
    "–ë–ê–ú üöß": 21,
    "–°–∞–¥–≥–æ—Ä–æ–¥ üåø": 20,
    "–ß–∞–π–∫–∞ üê¶": 19,
    "–û–∫–µ–∞–Ω—Å–∫–∞—è üåä": 18,
    "–ì–∞–π–¥–∞–º–∞–∫ üèòÔ∏è": 17,
    "–ë–∞–ª—è–µ–≤–∞ üß≠": 16,
    "64, 71 –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω—ã üè¢": 15,
    "–õ—É–≥–æ–≤–∞—è üåæ": 14,
    "–¢–∏—Ö–∞—è ü§´": 13,
    "–°–Ω–µ–≥–æ–≤–∞—è ‚ùÑÔ∏è": 12,
    "–°–∞—Ö–∞—Ä–Ω—ã–π –∫–ª—é—á üç¨": 11,
    "–°–ø—É—Ç–Ω–∏–∫ üõ∞Ô∏è": 10,
    "–ë–æ—Ä–∏—Å–µ–Ω–∫–æ üõ†Ô∏è": 9,
    "–¢—Ä—É–¥–æ–≤–∞—è üß±": 8,
    "–ü–µ—Ä–≤–æ—Ä–µ—á–µ–Ω—Å–∫–∏–π üìç": 7,
    "–í–µ—Å–µ–Ω–Ω—è—è üå∏": 6,
    "–ü—Ä–∏–≥–æ—Ä–æ–¥ üèûÔ∏è": 5,
    "–ü–æ–ø–æ–≤–∞ üèùÔ∏è": 4,
    "–ì–æ—Ä–Ω–æ—Å—Ç–∞–π üêøÔ∏è": 3,
    "–†—É—Å—Å–∫–∏–π üèùÔ∏è": 2,
    "–ü–æ-–æ–≤, –ü–µ—Å—á–∞–Ω–Ω—ã–π üèñÔ∏è": 1,
}

# Conversation state constants
SELECT_DISTRICT, INPUT_AREA, SELECT_APTYPE, INPUT_CURRENT_FLOOR, INPUT_TOTAL_FLOORS = range(5)


def build_keyboard(options, row_width: int = 2) -> InlineKeyboardMarkup:
    keyboard, row = [], []
    for i, option in enumerate(options, 1):
        row.append(InlineKeyboardButton(option, callback_data=option))
        if i % row_width == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)


def get_main_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("üí∞ –û—Ü–µ–Ω–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É", callback_data="estimate")],
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about")],
            [InlineKeyboardButton("‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="support")],
        ]
    )


async def type_and_send(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, **kwargs):
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    await asyncio.sleep(0.6)
    if update.message:
        await update.message.reply_text(text, **kwargs)
    elif update.callback_query:
        await update.callback_query.message.reply_text(text, **kwargs)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ.*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu(),
        parse_mode=ParseMode.MARKDOWN,
    )


async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "estimate":
        keyboard = build_keyboard(list(districts_name_to_num.keys()))
        await query.edit_message_text(
            "üåç *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –∫–≤–∞—Ä—Ç–∏—Ä—ã:*",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN,
        )
        return SELECT_DISTRICT
    elif query.data == "about":
        await query.edit_message_text(
            "üè† –ú—ã ‚Äî —Å–µ—Ä–≤–∏—Å –æ—Ü–µ–Ω–∫–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ —Å –ø–æ–º–æ—â—å—é ML. –ü—Ä–æ—Å—Ç–æ, –±—ã—Å—Ç—Ä–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!",
            reply_markup=get_main_menu(),
        )
    elif query.data == "support":
        await query.edit_message_text(
            "üôè –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É: +79241379584\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–º–æ—â—å ‚ù§Ô∏è",
            reply_markup=get_main_menu(),
        )


async def select_district(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    district_name = query.data
    district_num = districts_name_to_num.get(district_name)
    if district_num is None:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return SELECT_DISTRICT
    context.user_data["district_num"] = district_num
    context.user_data["district_name"] = district_name

    await query.edit_message_text(
        f"üìç –í—ã–±—Ä–∞–Ω —Ä–∞–π–æ–Ω: *{district_name}*\n\n–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–º¬≤):",
        parse_mode=ParseMode.MARKDOWN,
    )
    return INPUT_AREA


async def input_area(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        area = float(update.message.text.replace(",", "."))
        if area <= 0:
            raise ValueError
    except ValueError:
        return await type_and_send(update, context, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø–ª–æ—â–∞–¥–∏.")

    context.user_data["area"] = area
    keyboard = build_keyboard(list(apartment_type_mapping.keys()))
    await type_and_send(
        update,
        context,
        "üèòÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã:*",
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN,
    )
    return SELECT_APTYPE


async def select_aptype(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    aptype_name = query.data
    aptype_num = apartment_type_mapping.get(aptype_name)
    if aptype_num is None:
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECT_APTYPE

    context.user_data["aptype_num"] = aptype_num
    context.user_data["aptype_name"] = aptype_name

    await query.edit_message_text("üè¢ –í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–∂ –∫–≤–∞—Ä—Ç–∏—Ä—ã:")
    return INPUT_CURRENT_FLOOR


async def input_current_floor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        cf = int(update.message.text)
        if cf <= 0:
            raise ValueError
    except ValueError:
        return await type_and_send(update, context, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —ç—Ç–∞–∂–∞.")

    context.user_data["current_floor"] = cf
    await type_and_send(update, context, "üèóÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ:")
    return INPUT_TOTAL_FLOORS


async def input_total_floors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        tf = int(update.message.text)
        cf = context.user_data["current_floor"]
        if tf < cf or tf <= 0:
            return await type_and_send(
                update,
                context,
                "‚ö†Ô∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ —Ç–µ–∫—É—â–µ–º—É.",
            )
    except ValueError:
        return await type_and_send(update, context, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –¥–ª—è —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏.")

    context.user_data["total_floors"] = tf

    price = predict_price(
        area=context.user_data["area"],
        aptype=context.user_data["aptype_num"],
        district=context.user_data["district_num"],
        current_floor=context.user_data["current_floor"],
        total_floors=context.user_data["total_floors"],
    )
    price_rounded = int(price)

    reply_text = (
        f"üè† *–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã:*\n\n"
        f"*{price_rounded:,}* ‚ÇΩ\n\n"
        f"–î–∞–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω–∞: {context.user_data['district_name']}\n"
        f"–ü–ª–æ—â–∞–¥—å: {context.user_data['area']} –º¬≤\n"
        f"–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã: {context.user_data['aptype_name']}\n"
        f"–≠—Ç–∞–∂: {context.user_data['current_floor']} –∏–∑ {context.user_data['total_floors']}"
    )
    await type_and_send(update, context, reply_text, parse_mode=ParseMode.MARKDOWN)
    await type_and_send(update, context, "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=get_main_menu())

    return ConversationHandler.END


def predict_price(area, aptype, district, current_floor, total_floors):
    input_df = pd.DataFrame(
        {
            "area": [area],
            "aptype": [aptype],
            "district": [district],
            "current_floor": [current_floor],
            "total_floors": [total_floors],
            "key_rate": [KEY_RATE],
        }
    )
    prediction = model_data["model"].predict(input_df)[0]
    return prediction


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /start.")
    return ConversationHandler.END


async def keep_alive(app):
    while True:
        await asyncio.sleep(60 * 15)
        for chat_id in app.chat_data.keys():
            try:
                await app.bot.send_chat_action(chat_id=chat_id, action="typing")
            except Exception:
                pass


def main():
    TOKEN = "YOUR_BOT_TOKEN_HERE"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(main_menu_handler, pattern="^(estimate|about|support)$")],
        states={
            SELECT_DISTRICT: [CallbackQueryHandler(select_district)],
            INPUT_AREA: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_area)],
            SELECT_APTYPE: [CallbackQueryHandler(select_aptype)],
            INPUT_CURRENT_FLOOR: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_current_floor)],
            INPUT_TOTAL_FLOORS: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_total_floors)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
